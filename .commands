#!/bin/bash
#
function cert() {
  echo | openssl s_client -showcerts -servername $1 -connect $1:443 2>/dev/null | openssl x509 -inform pem -noout -text
}

function vpn() {
  vpn_name="streisand"
  command=$1
  region=${2:-eu-west-2}
  regions=`aws ec2 describe-regions --profile hemtech | jq '.Regions[].RegionName' --raw-output`

  if ! echo $regions | grep $region > /dev/null; then
    echo "Invalid region. Use one of the following."
    echo $regions
    return 1
  fi

  id=`aws ec2 describe-instances --filters Name=tag:Name,Values=$vpn_name --region $region --profile hemtech | jq --raw-output '.Reservations[].Instances[].InstanceId'`

  if [ $command = "start" ]; then
    aws ec2 ${command}-instances \
    --instance-ids $id \
    --profile hemtech \
    --region $region \
    > /dev/null

    aws ec2 wait instance-running \
    --instance-ids $id \
    --profile hemtech \
    --region $region

    # l2tp over IPSec
    # networksetup -connectpppoeservice $vpn_name

    # OpenVPN
    osascript -e "tell application \"/Applications/Tunnelblick.app\"" -e "connect \"HemTech $region\"" -e "end tell" > /dev/null

    echo "VPN started"

  else

    # l2tp over IPSec
    # scutil --nc stop $vpn_name

    # OpenVPN
    osascript -e "tell application \"/Applications/Tunnelblick.app\"" -e "disconnect \"HemTech $region\"" -e "end tell" > /dev/null

    aws ec2 ${command}-instances \
    --instance-ids $id \
    --profile hemtech \
    --region $region \
    > /dev/null

    aws ec2 wait instance-stopped \
    --instance-ids $id \
    --profile hemtech \
    --region $region

    echo "VPN stopped"
  fi

}

function yaml2json() {
  ruby -ryaml -rjson -e \
    '$/ = "END"; input = STDIN.gets; puts YAML.load(input).to_json if YAML.parse(input)'
}

#Info: https://community.akamai.com/community/web-performance/blog/2015/03/31/using-akamai-pragma-headers-to-investigate-or-troubleshoot-akamai-content-delivery
function akamai() {
  curl -sILk -H 'Pragma: akamai-x-cache-on, akamai-x-cache-remote-on,akamai-x-check-cacheable, akamai-x-get-cache-key,akamai-x-get-extracted-values, akamai-x-get-nonces,akamai-x-get-ssl-client-session-id,akamai-x-get-true-cache-key, akamai-x-serial-no' $* 2>&1
}

function backup() { 
  mv ~/$1 ~/Projects/dotfiles/ && ln -s ~/Projects/dotfiles/$1;   
}

function password() {
  chars='@#$%&_+='
  { </dev/urandom LC_ALL=C grep -ao '[A-Za-z0-9]' \
          | head -n$((RANDOM % 8 + 7))
      echo ${chars:$((RANDOM % ${#chars})):1}   # Random special char.
  } \
      | sort -r \
      | tr -d '\n' \
      | pbcopy \
      && echo `pbpaste`
}

function http() {
  port=${1:-8000}
  python2.7 -m SimpleHTTPServer $port
}

function set_aws_pro(){
  if [ -z "$1" ]
    then
      PS3='Select aws profile to use: '
      vars=(`cat ~/.aws/credentials | grep '\[*\]'| egrep -o '[^][]+'`)
      echo "Execute \"set_aws_pro profile\" to switch account";
      select opt in "${vars[@]}" ""Quit
        do
          if [ "$opt" = "Quit" ]; then
            echo done
            break
          elif [[ "${vars[*]}" == *"$opt"* ]]; then
            export AWS_DEFAULT_PROFILE=$opt;
            aws configure list;
            break
          else
           clear
           echo bad option
          fi
      done
    else
      export AWS_DEFAULT_PROFILE=$1;
      echo "Current profile is:";
      aws configure list;
  fi
};

function natvpn() {
  DIR=/tmp

  echo 'nat on en0 from any to any -> (en0)' > $DIR/share-vpn.rules
  sudo pfctl -f $DIR/share-vpn.rules -e
  echo "Use 'sudo pfctl -F all' to clear NAT rules"
}

function flushdns() {
  sudo killall -HUP mDNSResponder;sudo killall mDNSResponderHelper;sudo dscacheutil -flushcache
}

function gifify() {
  docker run -it --rm -v $(pwd):/data maxogden/gifify $@
}

function delete-calendar-cache() {
  rm -rf ~/Library/Calendar/Calender\ Cache*
  killall Calendar
  ps -ef | grep Calendar | head -1 | cut -d ' ' -f 5 | xargs kill -9
}

function kube-exec() {
  kubectl exec -it $1 -- sh
}

function kube-tunnel() {
  POD="$1"
  HOST="$2"
  DESTPORT="$3"
  if [ -z "$POD" -o -z "$DESTPORT" -o -z "$HOST" ]; then
    echo "Usage: kube-tunnel [pod name] [destination host] [destination port]"
      return 1
      fi
      pkill -f 'tcpserver 127.0.0.1 6666'
      tcpserver 127.0.0.1 6666 kubectl exec -i "$POD" nc "$HOST" "$DESTPORT"&
      echo "Connect to 127.0.0.1:6666 to access $POD $HOST:$DESTPORT"
}

function lpass-save() {
  FILE=$1
  cat $FILE | lpass add --non-interactive --notes $FILE && lpass mv $FILE Files
}

function diff-curl-json() {
  vimdiff \
    <(curl $1 | jq -S) \
    <(curl $2 | jq -S)
}

function git-search-replace() {
  git grep -l $1
  git grep -l $1 \
  | xargs sed -i -e "s/$1/$2/g"
}

function search-replace() {
  grep -R -l $1
  grep -R -l $1 \
  | xargs sed -i -e "s/$1/$2/g"
}

function git-clone-multiple() {
  while IFS= read -r line
  do
    echo "cloning $line"
    git clone $line
  done < <(cat $1)
}

function diff-github() {
  COMPARE=$1
  BASE=$2
  REPO=`git config --get remote.origin.url | sed 's/^.*://g' | sed 's/\.git//g'`
  open https://github.com/$REPO/compare/$BASE..$COMPARE
}

function print-function() {
    declare -f $1
}
